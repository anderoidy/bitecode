{"ast":null,"code":"import { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {}\nMatToolbarRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-toolbar-row',\n    exportAs: 'matToolbarRow',\n    host: {\n      'class': 'mat-toolbar-row'\n    }\n  }]\n}];\nclass MatToolbar extends _MatToolbarMixinBase {\n  constructor(elementRef, _platform, document) {\n    super(elementRef);\n    this._platform = _platform;\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(node => !!(node.textContent && node.textContent.trim()));\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\nMatToolbar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-toolbar',\n    exportAs: 'matToolbar',\n    template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n    inputs: ['color'],\n    host: {\n      'class': 'mat-toolbar',\n      '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n      '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n  }]\n}];\nMatToolbar.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nMatToolbar.propDecorators = {\n  _toolbarRows: [{\n    type: ContentChildren,\n    args: [MatToolbarRow, {\n      descendants: true\n    }]\n  }]\n};\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatToolbarModule {}\nMatToolbarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n    declarations: [MatToolbar, MatToolbarRow]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };","map":{"version":3,"names":["Directive","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Inject","ContentChildren","NgModule","mixinColor","MatCommonModule","Platform","DOCUMENT","MatToolbarBase","constructor","_elementRef","_MatToolbarMixinBase","MatToolbarRow","decorators","type","args","selector","exportAs","host","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","ngDevMode","isCombinedUsage","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","template","inputs","changeDetection","OnPush","encapsulation","None","styles","ctorParameters","undefined","propDecorators","descendants","Error","MatToolbarModule","imports","exports","declarations"],"sources":["C:/Users/ander/Documents/Projetos/bitecode-app/node_modules/@angular/material/fesm2015/toolbar.js"],"sourcesContent":["import { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {\n}\nMatToolbarRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' },\n            },] }\n];\nclass MatToolbar extends _MatToolbarMixinBase {\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n}\nMatToolbar.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n            },] }\n];\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n};\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}